package linkPrediction;

import edu.uci.ics.jung.graph.util.*;

import linkPrediction.algorithm.*;
import network.*;

import java.util.*;

import tools.Debug;
import tools.MathTool;
import tools.RandomOperation;

/**
 * @author gexin
 * 
 */
public class LinkPrediction {

	boolean debug = true;

	// private Map<AbstractE, Map<PredictionIndices, Float>> probeEdgesScores =
	// null;
	// private Map<AbstractE, Map<PredictionIndices, Float>> noneEdgesScores =
	// null;
	
	/*
	 * 对不存在边的预测， map key:预测指标， value:所有测试集边的预测分数值
	 */
	private Map<PredictionIndices, Vector<Float>> noneExistLinksScores = null;

	private AbstractNetwork predictedNet = null;

	private float probeEdgePercentage = 0.1f;

	private Vector<Pair<AbstractV>> probeLinks = null;
	
	/**
	 * 保存预测分数值， key为预测算法，对应value为该算法得到的被预测边分数值。
	 */
	private Map<PredictionIndices, Vector<Float>> probeLinksScores = null;

	private Vector<Pair<AbstractV>> noneExistLinks = null;

	private Vector<Set<AbstractE>> probeGroupVector = null;

	// Set<PredictedEdge> probeEdges = null;

	public LinkPrediction() {

		// probeEdgeResult = new TreeSet<PredictedEqdge>(
		// new PredictedEdgeComparator());
		// noneEdgesSet = new HashSet<AbstractE>();
		// probeEdgesScores=new
		// HashMap<AbstractE,Map<PredictionIndices,Float>>();
	}

	/**
	 * 测试集随机分组。每组测试集之间无交集。 *
	 * 
	 * @param groupNumber
	 *            分组数量。
	 */
	public void groupProbeLinks(AbstractNetwork net, int groupNumber) {

		if (probeGroupVector == null) {
			probeGroupVector = new Vector<Set<AbstractE>>();
		} else {
			probeGroupVector.clear();
		}

		for (int k = 0; k < groupNumber; k++) {
			probeGroupVector.add(new HashSet<AbstractE>());
		}

		Vector<AbstractE> allEdges = predictedNet.getAllEdges();
		for (int i = 0; i < allEdges.size(); i++) {

		}

		// for each edge random divide one edge into one probe set.
		for (AbstractE e : predictedNet.getEdges()) {

			Pair<AbstractV> p = predictedNet.getEndpoints(e);
			int randomSet = RandomOperation.randomIndexIn(groupNumber);

		}

		/* for debug */

		if (debug) {
			Debug.outn("probe set vector size " + probeGroupVector.size());
			int total = 0;
			for (Set<AbstractE> pe : probeGroupVector) {
				total += pe.size();
				Debug.outn("probe set size : " + pe.size());
			}
			Debug.outn("total probe e count : " + total);
		}

	}
	
	
	/**
	 * 找出不存在的边。
	 */
	public void calssifyNoneExistLinks() {

		int vertexCount = predictedNet.getVertexCount();
		int edgeCount = predictedNet.getEdgeCount();

		// 不存在none边，即完全图。
		if (edgeCount == (vertexCount * (vertexCount - 1)) / 2) {
			Debug.outn("完全图");
			return;
		}

		Vector<AbstractV> allVertex = predictedNet.getAllVertex();
		AbstractV vA;
		AbstractV vB;
		for (int a = 0; a < allVertex.size(); a++) {
			vA = allVertex.get(a);
			for (int b = a+1; b < allVertex.size(); b++) {
				vB = allVertex.get(b);
				if (a != b) {
					if (!predictedNet.containEdge(vA, vB) && !vA.equals(vB)) {
						if(noneExistLinks==null){
							noneExistLinks=new Vector<Pair<AbstractV>>();
						}
						noneExistLinks.add(new Pair(vA, vB));
					}
				}
			}
		}

	}

	
	/**
	 * 从网络中随机移除一定比例的边加入测试集。
	 * 
	 * @param net
	 * @param percent
	 *            测试集边占所有边的比例
	 * @param type
	 */
	public void classifyProbeLinks(float percent) {
		
		if (percent > 1) {
			percent = 1;
		}
		if (percent < 0) {
			percent = 0;
		}
		
		if (probeLinks == null) {
			probeLinks = new Vector<Pair<AbstractV>>();
		} else {
			probeLinks.clear();
		}
		
		/**
		 * 找出不存在的边
		 */
		this.calssifyNoneExistLinks();

		/**
		 * 测试集中边的数量。
		 */
		int edgeCount = predictedNet.getEdgeCount();
		int probeEdgeCount = (int) (edgeCount * percent);

		/**
		 * random select edge into probe set 
		 */
		Vector<AbstractE> allEdges = predictedNet.getAllEdges();
		for (int i = 0; i < probeEdgeCount; i++) {
			AbstractE e = allEdges.get(RandomOperation.randomIndexIn(allEdges
					.size()));

			Pair<AbstractV> p = predictedNet.getEndpoints(e);

			if (probeLinks.contains(p)) {// 去掉重复link
				i--;
			} else {
				if (i % 100 == 0) {
					Debug.outn("划分测试集，已完成 " + (float) i / probeEdgeCount);
				}
				probeLinks.add(p);
			}
		}
		
		/**
		 * 移除网络中的测试集合边
		 */
		this.removeProbeLinks(this.predictedNet);

	}// //////////////////////



	private void clearResultRecord() {

	}

	public float getProbeEdgePercentage() {
		return probeEdgePercentage;
	}

	
	/**
	 * 链路预测。
	 * 
	 * @param net 被预测网络
	 * @param algorithm 预测算法
	 */
	public void predictProbeLinks(AbstractNetwork net,
			AbstractPredictAlgorithm algorithm) {

		/* compute for another network or a new one */
		if (predictedNet == null) {
			predictedNet = net;

		} else {
			if (!predictedNet.getNetID().equals(net.getNetID())) {
				predictedNet = net;
			}
		}

		clearResultRecord();
		
		if(probeLinksScores==null){
			probeLinksScores=new HashMap<PredictionIndices, Vector<Float>>();
		}else{
			probeLinksScores.clear();
		}
		
		/**
		 * 划分测试集
		 */
		this.classifyProbeLinks(0.1f);// 

		/**
		 * 计算测试集中边的预测分数 
		 */
		
		/* 预测算法指标。*/
		PredictionIndices[] index = new PredictionIndices[2];
		index[0] = PredictionIndices.CN;
		index[1] = PredictionIndices.Jaccard;	
		
		
		
		for (int probeEdge = 0; probeEdge < probeLinks.size(); probeEdge++) {
			Pair<AbstractV> pair = probeLinks.get(probeEdge);
			// this.probeLinksScores.add(pI, algorithm.computeOneLinkScore(
			// predictedNet, pair.getFirst(), pair.getSecond()),
			// index);
			float[] scores = algorithm.computeLinkScore(predictedNet,
					pair.getFirst(), pair.getSecond(), index);
			for (int k = 0; k < index.length; k++) {
				if(probeLinksScores.get(index[k]) == null ){
					probeLinksScores.put(index[k], new Vector<Float>() );
				}
				probeLinksScores.get(index[k]).add(scores[k]);
			}
		}

	}////////////////////////predictProbeLInks()//////////////////////////////

	
	/**
	 * 移除网络中已经选为测试集的边。
	 * 注意：网络已经发生变化。
	 * @param net
	 */
	private void removeProbeLinks(AbstractNetwork net) {
		
		/* remove probe edges from original network */
		int i = 0;
		int size = probeLinks.size();
		for (Pair<AbstractV> pair : probeLinks) {
			net.removeEdge(net.findEdge(pair.getFirst(), pair.getSecond()));
			if(debug){
				if ( i++ % 100 == 0) {
					Debug.outn("移除网络中测试集边，已完成 " + (float) i / size);
				}
			}
		}

	}

	
	/***
	 * 预测不存在边分数。
	 * @param algorithm 具体的预测算法
	 */
	public void predictNoneExistLinks(AbstractPredictAlgorithm algorithm) {
		
		PredictionIndices[] index = new PredictionIndices[2];
		index[0] = PredictionIndices.CN;
		index[1] = PredictionIndices.Jaccard;

		if(noneExistLinksScores==null){
			noneExistLinksScores=new HashMap<PredictionIndices, Vector<Float>>();
		}else{
			noneExistLinksScores.clear();
		}
		
		
		/* 计算预测分数 */
		for (int noneI = 0; noneI < noneExistLinks.size(); noneI++) {
			Pair<AbstractV> pair = noneExistLinks.get(noneI);
		
			float[] s = algorithm.computeLinkScore(predictedNet,
					pair.getFirst(), pair.getSecond(), index);
			for (int k = 0; k < index.length; k++) {
				if(noneExistLinksScores.get(index[k]) == null ){
					noneExistLinksScores.put(index[k], new Vector<Float>() );
				}
				noneExistLinksScores.get(index[k]).add(s[k]);
			}

		}

	}

	
	/**
	 * 计算预测算法精确度。
	 * 
	 * @return
	 */
	public float quantifyAccuracy() {
		float result = 0.0f;

		return result;

	}

	
	/**
	 * 随机选择一条不存在的边。
	 * 
	 * @return
	 */
	public Pair<AbstractV> randomChooseNoneEdge() {
		int vertexCount = predictedNet.getVertexCount();
		int edgeCount = predictedNet.getEdgeCount();

		// 不存在none边，即完全图。
		if (edgeCount == (vertexCount * (vertexCount - 1)) / 2) {
			Debug.outn("完全图");
			return null;
		}

		while (true) {
			Vector<AbstractV> allVertex = predictedNet.getAllVertex();

			AbstractV vA = RandomOperation.RandomSelectOne(allVertex);
			AbstractV vB = RandomOperation.RandomSelectOne(allVertex);
			if (!predictedNet.containEdge(vA, vB) && !vA.equals(vB)) {
				// Debug.outn("find ");
				return new Pair(vA, vB);
			}

			else {
				continue;
			}
		}

	}

	
	/**
	 * AUC 标准评价预测算法
	 * 
	 * @param probeLinksScores
	 *            测试集的预测分数
	 * @param noneExistLinksScores
	 *            不存在边的预测分数
	 * @param compareCount
	 *            比较次数
	 * @return
	 */
	public float AUC(PredictionIndices index, int compareCount) {

		int equalCount = 0;
		int biggerCount = 0;

		if (noneExistLinksScores == null) {
			return -1;
		}

		if (probeLinksScores == null) {
			return -1;
		}
		
		;

		for (int i = compareCount; i > 0; i--) {

			
			float nS = noneExistLinksScores.get(index).get( RandomOperation.randomIndexIn(noneExistLinksScores.size()) );
			float pS = probeLinksScores.get(index).get(RandomOperation.randomIndexIn(probeLinksScores.size()) );
			Debug.outn("ns "+nS+"   PS "+pS);
			
			if (pS > nS) {
				biggerCount++;
			}
			if (pS == nS) {
				equalCount++;
			}
		}

		return (0.5f * equalCount + biggerCount) / compareCount;

	}

	
	/**
	 * 将测试集边添加到网络中。
	 */
	private void recoveryNetwork() {
		for (Pair<AbstractV> pair : probeLinks) {
			// 边在网络中不存在
			if (predictedNet.findEdge(pair.getFirst(), pair.getSecond()) == null) {
				predictedNet.addEdge(predictedNet.createNewEdge(),
						pair.getFirst(), pair.getSecond());
			}
		}
	}
	

	public void setProbeEdgePercentage(float probeEdgePercentage) {
		this.probeEdgePercentage = probeEdgePercentage;
	}

	// test for this class
	public void test(AbstractNetwork net) {
		this.predictedNet = net;
		//
		Debug.outn("L " + net.getEdgeCount() + "  N " + net.getVertexCount());

		Debug.outn("remove probe links");		
	

	
		Debug.outn("L " + net.getEdgeCount() + "  N " + net.getVertexCount());

		predictedNet.setNetID("test net");
		
		

		LocalSimilarity ls = new LocalSimilarity();
		predictProbeLinks(this.predictedNet, ls);		
		this.predictNoneExistLinks(ls);
		
		Debug.outn("不存在边的数量 "+this.noneExistLinks.size());
		
		Debug.outn("probe links");
		for(PredictionIndices index:probeLinksScores.keySet()){
			Debug.outn(index+"///////////"+ probeLinksScores.get(index).toString());
		}
		
		Debug.outn("none exist links");
		for(PredictionIndices index:noneExistLinksScores.keySet()){
			Debug.outn(index+"///////////"+ noneExistLinksScores.get(index).toString());
		}
		
		float r=this.AUC(PredictionIndices.CN, this.probeLinks.size()*10);
		Debug.outn("CN 结果 "+r);

	}

	public <T> boolean pairEquals(Pair<T> pA, Pair<T> pB) {
		if (pA.getFirst().equals(pB.getSecond())) {
			return true;
		}

		if (pB.getFirst().equals(pA.getSecond())) {
			return true;
		}

		return false;
	}

}// ////////////////////////////////////////////////////////////

class PredictedEdge {

	Float score = null;

	AbstractV vA = null;
	AbstractV vB = null;

	public PredictedEdge(AbstractV vB, AbstractV vA) {
		this.vA = vA;
		this.vB = vB;

	}

	public boolean equals(PredictedEdge obj) {
		// TODO Auto-generated method stub
		return this.getID().equals(obj.getID());
	}

	public String getID() {
		if (vA.getID().compareTo(vB.getID()) > 0) {
			return vA.getID() + vB.getID();
		} else {
			return vB.getID() + vA.getID();
		}
	}

	public Float getScore() {
		return score;
	}

	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return this.getID().hashCode();
	}

	public void setScore(Float score) {
		this.score = score;
	}

}

class PredictedEdgeComparator implements Comparator<PredictedEdge> {

	@Override
	public int compare(PredictedEdge eA, PredictedEdge eB) {

		if (eA.getScore() >= eB.getScore()) {
			return 1;
		} else {
			return -1;
		}

	}

}

/**
 * 
 * type of edge for prediction.</p> T, the edge for train. </p> P, the edge for
 * probe. </p> N,the edge doesn't exist in original network.
 */
enum PredictedEdgeType {
	N, // the edge doesn' exist in original network, // the edge for train
	P, // the edge for probe
	T
}
